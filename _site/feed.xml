<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>sudo apt-get install coffee</description>
    <link>http://kaisoerenbecker.de//</link>
    <atom:link href="http://kaisoerenbecker.de//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 24 Mar 2016 11:25:17 +0100</pubDate>
    <lastBuildDate>Thu, 24 Mar 2016 11:25:17 +0100</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>Scheduling future posts in Jekyll</title>
        <description>&lt;p&gt;One of the handy features ok jekyll is to easily schedule future blog posts. The most conveniant way in my opinion is to give the file a date in the future. Jekyll keeps ignoring articles, that have a higher date than today. To preview the posts in develop mode, you simply add the &lt;code&gt;--future&lt;/code&gt; flag when running jekyll:
&lt;code&gt;jekyll serve -w --future&lt;/code&gt;
This will show all posts, even with future dates. That way you can review them in your layout and correct things if you need.&lt;br /&gt;
Another option is to add &lt;code&gt;published: true/false&lt;/code&gt; to your posts and switch the flag when the post is ready. With &lt;code&gt;jekyll server -w --unpublished&lt;/code&gt; you can display the posts locally.&lt;/p&gt;

&lt;p&gt;Personally I prefer setting future dates, because I can finish the posts and leave it untouched. For the deployment I can simply pull run jekyll once a day and push the changes to the server.&lt;/p&gt;
</description>
        <pubDate>Thu, 24 Mar 2016 00:00:00 +0100</pubDate>
        <link>http://kaisoerenbecker.de//jekyll/Future-posts-in-jekyll.html</link>
        <guid isPermaLink="true">http://kaisoerenbecker.de//jekyll/Future-posts-in-jekyll.html</guid>
        
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>Basic syntax checking of xsd files</title>
        <description>&lt;p&gt;As I mentioned before, I spend a lot of time working with the cli. And for a lot of tasks, there are nice little helpers build directly into the system (OS X in my case). Today I had to validate an XSD file for documentation purposes. While I use Sublime for editing and creating XML/HTML files, I often prefer cli tools to do smaller tasks. &lt;code&gt;xmllint&lt;/code&gt; is an often used tool for example and perfect for simple tasks, like validating large XML or XSD files. To validate a XSD file against the w3c standard definition just use the following command:&lt;br /&gt;
&lt;code&gt;xmllint --noout --dtdvalid http://www.w3.org/2001/XMLSchema.dtd file.xsd&lt;/code&gt;&lt;br /&gt;
If there is no output everything is fine (you can easily verify that by breaking the XML syntax like leaving a tag open).&lt;/p&gt;
</description>
        <pubDate>Wed, 23 Mar 2016 00:00:00 +0100</pubDate>
        <link>http://kaisoerenbecker.de//xml/Basic-syntax-checking-of-xsd-files.html</link>
        <guid isPermaLink="true">http://kaisoerenbecker.de//xml/Basic-syntax-checking-of-xsd-files.html</guid>
        
        
        <category>xml</category>
        
      </item>
    
      <item>
        <title>Switching to homebrew</title>
        <description>&lt;p&gt;For the last few years I was using macports as my favorite tool for using unix apps on OS X. 
With the years I installed a lot of stuff I barely used, so my point was to start from scratch with the things I need.
When trying out things like node js, I often had problems with finding the right packages and macports wasn’t helpfull most of the time. 
So I switched over to homebrew, starting with a minimalistic list of packages, like postgres, htop and a few others.
I will keep you updated how things work out and if there is any trouble during OS updates or things like that.&lt;/p&gt;
</description>
        <pubDate>Tue, 22 Mar 2016 00:00:00 +0100</pubDate>
        <link>http://kaisoerenbecker.de//cli/Switching-to-homebrew.html</link>
        <guid isPermaLink="true">http://kaisoerenbecker.de//cli/Switching-to-homebrew.html</guid>
        
        
        <category>cli</category>
        
      </item>
    
      <item>
        <title>Using jekyll instead of wordpress</title>
        <description>&lt;p&gt;Yeah, I switched to wordpress a while ago, I know. But I barely use all the features of wordpress and the overhead therefor is a lot. So I extracted all my posts from the last months and put them into a neat little, jekyll build, static site. Hope you guys enjoy it. If you have any questions, just drop me a mail or post a comment down below.&lt;/p&gt;
</description>
        <pubDate>Mon, 21 Mar 2016 00:00:00 +0100</pubDate>
        <link>http://kaisoerenbecker.de//general/Using-jekyll-instead-of-wordpress.html</link>
        <guid isPermaLink="true">http://kaisoerenbecker.de//general/Using-jekyll-instead-of-wordpress.html</guid>
        
        
        <category>general</category>
        
      </item>
    
      <item>
        <title>Open JIRA search from command line</title>
        <description>&lt;p&gt;In addition to my last post, I made a little bash script for opening the search dialog of a custom JIRA instance from command line. The script works on OS X and opens a new tab in your default browser:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;jira_search&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;c&quot;&gt;#configure your JIRA url here:&lt;/span&gt;
   &lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;https://my.jira.url&amp;#39;&lt;/span&gt;

   url+&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/jira/issues/?jql=text~&amp;quot;&amp;#39;&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$#&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
      url+&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$a&amp;quot;&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      url+&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$1&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; a in &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;@:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
         url+&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;
         url+&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$a&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
   url+&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;quot;&amp;#39;&lt;/span&gt;
   open &lt;span class=&quot;s2&quot;&gt;&amp;quot;$url&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;jira_search&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Just put this snippet into your bash.rc or in a seperate bash_alias file.
Don’t forget to run
&lt;code&gt;source .bash_aliases&lt;/code&gt; (or wherever you put it)
to make the function available.&lt;/p&gt;
</description>
        <pubDate>Tue, 02 Feb 2016 00:00:00 +0100</pubDate>
        <link>http://kaisoerenbecker.de//bash/open-jira-search-from-command-line.html</link>
        <guid isPermaLink="true">http://kaisoerenbecker.de//bash/open-jira-search-from-command-line.html</guid>
        
        
        <category>bash</category>
        
      </item>
    
      <item>
        <title>Searching google, wikipedia and other sites via terminal</title>
        <description>&lt;p&gt;During work I get a lot of stuff done via command line tasks or scripts. So why not search for stuff via cli because it is open anyway? Today I came across s, a project by &lt;a href=&quot;https://github.com/zquestz&quot;&gt;Josh Ellithorpe&lt;/a&gt;. It’s a little tool, written in go which is really easy to use: &lt;code&gt;s -p wikipedia &amp;lt;searchterm&amp;gt;&lt;/code&gt; Using it without the &lt;code&gt;p&lt;/code&gt; flag searches using Google by default. The following search engines/sites are currently integrated:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;amazon&lt;/li&gt;
  &lt;li&gt;bing&lt;/li&gt;
  &lt;li&gt;digg&lt;/li&gt;
  &lt;li&gt;dockerhub&lt;/li&gt;
  &lt;li&gt;duckduckgo&lt;/li&gt;
  &lt;li&gt;github&lt;/li&gt;
  &lt;li&gt;google&lt;/li&gt;
  &lt;li&gt;pinterest&lt;/li&gt;
  &lt;li&gt;reddit&lt;/li&gt;
  &lt;li&gt;soundcloud&lt;/li&gt;
  &lt;li&gt;stackoverflow&lt;/li&gt;
  &lt;li&gt;twitter&lt;/li&gt;
  &lt;li&gt;wikipedia&lt;/li&gt;
  &lt;li&gt;yahoo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;via &lt;a href=&quot;http://t3n.de/news/&quot;&gt;http://t3n.de/news/&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 26 Jan 2016 00:00:00 +0100</pubDate>
        <link>http://kaisoerenbecker.de//bash/searching-google-wikipedia-and-other-sites-via-terminal.html</link>
        <guid isPermaLink="true">http://kaisoerenbecker.de//bash/searching-google-wikipedia-and-other-sites-via-terminal.html</guid>
        
        
        <category>bash</category>
        
      </item>
    
      <item>
        <title>Creating local Chrome apps for web apps on OS X</title>
        <description>&lt;p&gt;I use a lot of Google services for business and private purposes. Both Inbox and Play Music for example have great web apps which are easy to use. But there is no native desktop application which I would prefer in some ways (independent window, not bound to a specific browser, ..)&lt;br /&gt;
Gladly there is a simple tool to generate a local app out of a web app making use of Google Chrome as a wrapper. The tool is called &lt;strong&gt;createGcApp&lt;/strong&gt;, created by &lt;a href=&quot;&amp;quot;http://maxkostow.com/&amp;quot;&quot;&gt;Max Kostow&lt;/a&gt;, and can be found on &lt;a href=&quot;&amp;quot;https://github.com/maxkostow/createchromeapp&amp;quot;&quot;&gt;github&lt;/a&gt;.&lt;br /&gt;
When starting the tool, simply enter an app name, insert the URL you wish to bind and select an image as an icon. createGcApp will create a seperate chrome profile, so none of your existing settings will be touched. Starting the created app for the first time, you will be asked for your credentials (if you use it with service that need authentication of course).&lt;/p&gt;

</description>
        <pubDate>Sun, 17 Jan 2016 00:00:00 +0100</pubDate>
        <link>http://kaisoerenbecker.de//app/creating-local-chrome-apps-for-web-apps-on-os-x.html</link>
        <guid isPermaLink="true">http://kaisoerenbecker.de//app/creating-local-chrome-apps-for-web-apps-on-os-x.html</guid>
        
        
        <category>app</category>
        
      </item>
    
      <item>
        <title>Revealing files in file tree in Sublime Text</title>
        <description>&lt;p&gt;As I mentioned before, I’m using Sublime Text 3 as my main editor/IDE.
When searching through bigger projects with a lot of subfolders it is always nice to know where you are.
Sublime has the feature to highlight the current file inside the file tree in your sidebar.
For easier access you can put a shortcut into your user preferences:&lt;br /&gt;
&lt;code&gt;{ &quot;keys&quot;: [&quot;super+shift+r&quot;], &quot;command&quot;: &quot;reveal_in_side_bar&quot;}&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 22 Apr 2015 00:00:00 +0200</pubDate>
        <link>http://kaisoerenbecker.de//app/revealing-files-in-file-tree-in-sublime-text.html</link>
        <guid isPermaLink="true">http://kaisoerenbecker.de//app/revealing-files-in-file-tree-in-sublime-text.html</guid>
        
        
        <category>app</category>
        
      </item>
    
      <item>
        <title>Deleting &gt; 26000 files via CLI</title>
        <description>&lt;p&gt;I came across a problem today, were I wanted to delete about 49000 files in a folder with a specific file name.
First thing I tried was &lt;code&gt;rm -f *foo.xml&lt;/code&gt; but permanently got the error&lt;br /&gt;
&lt;code&gt;-bash: /bin/rm: Argument list too long&lt;/code&gt;.
In short, the problem is that the command exceeds &lt;code&gt;getconf ARG_MAX&lt;/code&gt;, which is set to 262144 on my machine (depends on your linux kernel).&lt;br /&gt;
So how to workaround this problem? Just use a simple for loop in bash:&lt;br /&gt;
&lt;code&gt;for f in *foo.xml; do rm &quot;$f&quot;; done&lt;/code&gt;&lt;br /&gt;
Optionally you could create a bash function that accepts a filename as an argument.
Further Information can be found here.&lt;/p&gt;
</description>
        <pubDate>Tue, 24 Mar 2015 00:00:00 +0100</pubDate>
        <link>http://kaisoerenbecker.de//bash/deleting-26000-files-via-cli.html</link>
        <guid isPermaLink="true">http://kaisoerenbecker.de//bash/deleting-26000-files-via-cli.html</guid>
        
        
        <category>bash</category>
        
      </item>
    
      <item>
        <title>Display whitespaces in Sublime Text</title>
        <description>&lt;p&gt;Sublime Text is my main editor and I’m using it all day long. The flexibility and extendability is what I like most. Sometimes there is just one thing you want to change about your editor and keep searching through the prefs all day long. With Sublime Text this is quite handy, because all the settings are kept in a json config.
To enable whitespaces being displayed all the time (not only when selected), just paste &lt;code&gt;&quot;draw_white_space&quot;: &quot;all&quot;&lt;/code&gt;&lt;br /&gt;
into &lt;code&gt;Sublime Text -&amp;gt; Preferences -&amp;gt; Settings - User&lt;/code&gt; after the opening &lt;code&gt;{&lt;/code&gt;.&lt;br /&gt;
The file contents should look like&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    ...
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;draw_white_space&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;all&amp;quot;&lt;/span&gt;
    ...
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
</description>
        <pubDate>Wed, 18 Mar 2015 00:00:00 +0100</pubDate>
        <link>http://kaisoerenbecker.de//app/display-whitespaces-in-sublime-text.html</link>
        <guid isPermaLink="true">http://kaisoerenbecker.de//app/display-whitespaces-in-sublime-text.html</guid>
        
        
        <category>app</category>
        
      </item>
    
  </channel>
</rss>
